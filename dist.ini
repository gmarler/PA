name    = PA
author  = Gordon Marler <gmarler@bloomberg.net>
license = Perl_5
copyright_holder = Gordon Marler
copyright_year   = 2015

; version provider
[Git::NextVersion]       ; get version from last release tag
first_version  = 0.001
version_regexp = ^release-(.+)$

; collect contributors list
[ContributorsFromGit]

; choose files to include
[Git::GatherDir]         ; everything from git ls-files
exclude_filename = README.pod   ; skip this generated file
exclude_filename = META.json    ; skip this generated file
exclude_filename = .gitignore   ; skip this generated file

[PruneCruft]             ; default stuff to skip
[ManifestSkip]           ; if -f MANIFEST.SKIP, skip those, too

; file modifications
[OurPkgVersion]          ; add $VERSION = ... to all files
[InsertCopyright]        ; add copyright at "# COPYRIGHT"
[PodWeaver]              ; generate Pod
; config_plugin = @GMARLER   ; my own plugin allows Pod::WikiDoc

; generated files
[License]                ; boilerplate license
[ReadmeFromPod]          ; from Pod (runs after PodWeaver)

; t tests
[Test::ReportPrereqs]    ; show prereqs in automated test output

; xt tests
[Test::MinimumVersion]   ; xt/release/minimum-version.t
; TODO here...
; Fix below with stopwords
; [Test::PodSpelling]      ; xt/author/pod-spell.t
[Test::Perl::Critic]     ; xt/author/critic.t
[MetaTests]              ; xt/release/meta-yaml.t
[PodSyntaxTests]         ; xt/release/pod-syntax.t
[PodCoverageTests]       ; xt/release/pod-coverage.t
[Test::Portability]      ; xt/release/portability.t (of file name)
options = test_one_dot = 0
[Test::Version]          ; xt/release/test-version.t
[Test::Compile]          ; xt/author/00-compile.t
fake_home = 1            ; fakes $ENV{HOME} just in case
xt_mode   = 1            ; make sure all files compile

; metadata
[AutoPrereqs]            ; find prereqs from code
skip = ^t::lib

[MetaNoIndex]            ; sets 'no_index' in META
directory = t
directory = xt
directory = examples
directory = corpus
package = DB             ; just in case

;[AutoMetaResources]      ; set META resources
;bugtracker.rt     = 1
;repository.github = user:gmarler
;homepage          = https://metacpan.org/release/%{dist}

[MetaProvides::Package]  ; add 'provides' to META files
meta_noindex = 1         ; respect prior no_index directives

;[Prereqs::AuthorDeps]    ; add authordeps as develop/requires
[MetaYAML]               ; generate META.yml
[MetaJSON]               ; generate META.json

; build system
[ExecDir]                ; include 'bin/*' as executables
[ShareDir]               ; include 'share/' for File::ShareDir
; [MakeMaker]              ; create Makefile.PL
; eumm_version = 6.17
[MakeMaker::Awesome]     ; create Makefile.PL - extensible to XS
WriteMakefile_arg = PREREQ_PM => { "Catalyst::Runtime" => '5.90074', "Catalyst::Plugin::ConfigLoader" => '0', "Catalyst::Plugin::Static::Simple" => '0', "Catalyst::Action::RenderView" => '0', "Config::General" => '0', }
WriteMakefile_arg = TEST_REQUIRES => { "Test::More" => '0.88', }

; manifest (after all generated files)
[Manifest]               ; create Manifest

;; OLD: copy META.json back to repo dis
; copy cpanfile back to repo dis
[CopyFilesFromBuild]
copy = cpanfile
copy = META.json
move = .gitignore

; before release
[PromptIfStale]          ; check if our build tools are out of date
;module = Dist::Zilla

[Git::Check]             ; ensure all files checked in
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = cpanfile
allow_dirty = README.pod
allow_dirty = META.json

;[CheckMetaResources]     ; ensure META has 'resources' data
;[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
;[CheckChangesHasContent] ; ensure Changes has been updated
[CheckExtraTests]        ; ensure xt/ tests pass
[TestRelease]            ; ensure t/ tests pass
[ConfirmRelease]         ; prompt before uploading

; releaser
;[UploadToCPAN]           ; uploads to CPAN
[FakeRelease]
;[Pinto::Add]
;root   = http://localhost:3111/    ; at least one root is required
;stack  = 20140704                  ; optional. defaults to undef
;author = GMARLER                   ; optional. defaults to username
;no_recurse    = 1                  ; optional. defaults to 0
;authenticate  = 1                  ; optional. defaults to 0
;username      = you                ; optional. will prompt if needed
;password      = secret             ; optional. will prompt if needed

; after release
[Git::Commit / Commit_Dirty_files] ; commit Changes (as released)

[Git::Tag]               ; tag repo with custom tag
tag_format = release-%v

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual
[NextRelease]

[Git::Commit / Commit_Changes] ; commit Changes (for new dev)

;[Git::Push]              ; push repo to remote
;push_to = origin

