#!/usr/bin/env perl

use strict;
use warnings;
use v5.20;

# VERSION
# PODNAME: pa_client - the Performance Analytics Client

use Getopt::Long;
use JSON::MaybeXS;
use DateTime::TimeZone   qw();
use Net::Async::AMQP;
use IO::Async::Loop;
use Data::Dumper;
use Solaris::mdb;
use PA::AMQP::Client;
use PA::Capture::kstat;

# This spike shows how PA clients starting up will initially post host specific
# information, so that it can be received and pre-inserted into the back end
# database before the host begins to send information.

my %client_ctor_args;
my $amqp_server;

my $kstats_to_collect =
  [
    [ qw( unix    0      system_pages) ],
    [ qw( unix    0      dnlcstats) ],
    [ qw( zfs     0      arcstats) ],
  ];

GetOptions( "amqp=s" => \$amqp_server )
  or die("ERROR in command line args");

if ($amqp_server) {
  $client_ctor_args{amqp_server} = $amqp_server;
}

my $loop = IO::Async::Loop->new();
$client_ctor_args{loop} = $loop;

my $client = PA::AMQP::Client->new( %client_ctor_args );
my $kstats = PA::Capture::kstat->new(
  # TODO: Don't need loop if we've got client with loop within it
  loop              => $loop,
  client            => $client,
  kstats_to_collect => $kstats_to_collect,
);

#my $vmstat = PA::Capture::vmstat->new();

my $dtrace_script = q\
this string fstype;

fbt::fop_read:entry,
fbt::fop_write:entry,
fbt::fop_ioctl:entry,
fbt::fop_access:entry,
fbt::fop_getattr:entry,
fbt::fop_setattr:entry,
fbt::fop_lookup:entry,
fbt::fop_create:entry,
fbt::fop_remove:entry,
fbt::fop_link:entry,
fbt::fop_rename:entry,
fbt::fop_mkdir:entry,
fbt::fop_rmdir:entry,
fbt::fop_readdir:entry,
fbt::fop_symlink:entry,
fbt::fop_readlink:entry,
fbt::fop_fsync:entry,
fbt::fop_getpage:entry,
fbt::fop_putpage:entry,
fbt::fop_map:entry,
fbt::fop_open:entry
/((self->vnode0 == NULL))/{
	self->vnode0 = arg0;
	self->depth0 = stackdepth;
	self->latency0 = timestamp;
}

fbt::fop_open:return
/((((((self->vnode0) != NULL)))) && (((((self->depth0) != NULL)))) && (((((self->latency0) != NULL)))) && (((((this->fstype = stringof((*((vnode_t**)self->vnode0))->v_op->vnop_name)) != NULL || 1)))) && (self->depth0 == stackdepth && self->vnode0 != NULL && (this->fstype == "ufs" || this->fstype == "zfs" || this->fstype == "dev" || this->fstype == "dev fs" || this->fstype == "proc" || this->fstype == "lofs" || this->fstype == "tmpfs" || this->fstype == "nfs")))/{
	@[((probefunc + 4)),this->fstype] = llquantize((timestamp - self->latency0), 10, 3, 11, 100);
}

fbt::fop_read:return,
fbt::fop_write:return,
fbt::fop_ioctl:return,
fbt::fop_access:return,
fbt::fop_getattr:return,
fbt::fop_setattr:return,
fbt::fop_lookup:return,
fbt::fop_create:return,
fbt::fop_remove:return,
fbt::fop_link:return,
fbt::fop_rename:return,
fbt::fop_mkdir:return,
fbt::fop_rmdir:return,
fbt::fop_readdir:return,
fbt::fop_symlink:return,
fbt::fop_readlink:return,
fbt::fop_fsync:return,
fbt::fop_getpage:return,
fbt::fop_putpage:return,
fbt::fop_map:return
/((((((self->vnode0) != NULL)))) && (((((self->depth0) != NULL)))) && (((((self->latency0) != NULL)))) && (((((this->fstype = stringof(((vnode_t*)self->vnode0)->v_op->vnop_name)) != NULL || 1)))) && (self->depth0 == stackdepth && self->vnode0 != NULL && (this->fstype == "ufs" || this->fstype == "zfs" || this->fstype == "dev" || this->fstype == "dev fs" || this->fstype == "proc" || this->fstype == "lofs" || this->fstype == "tmpfs" || this->fstype == "nfs")))/{
	@[((probefunc + 4)),this->fstype] = llquantize((timestamp - self->latency0), 10, 3, 11, 100);
}

fbt::fop_read:return,
fbt::fop_write:return,
fbt::fop_ioctl:return,
fbt::fop_access:return,
fbt::fop_getattr:return,
fbt::fop_setattr:return,
fbt::fop_lookup:return,
fbt::fop_create:return,
fbt::fop_remove:return,
fbt::fop_link:return,
fbt::fop_rename:return,
fbt::fop_mkdir:return,
fbt::fop_rmdir:return,
fbt::fop_readdir:return,
fbt::fop_symlink:return,
fbt::fop_readlink:return,
fbt::fop_fsync:return,
fbt::fop_getpage:return,
fbt::fop_putpage:return,
fbt::fop_map:return,
fbt::fop_open:entry
/((self->depth0 == stackdepth))/{
	(self->vnode0) = 0;
	(self->depth0) = 0;
	(self->latency0) = 0;
}

\;


# Capture Filesystem Operation Latency data
my $dtrace_options = [ [ qw( dynvarsize   32m ) ],
                       [ qw( cleanrate  137Hz ) ],
                     ];
my $dtrace_capture =
  PA::Capture::DTrace->new( client         => $client,
    # loop           => $loop,
                            dtrace_script  => $dtrace_script,
                            stat_name      => 'fsop_lat',
                            dtrace_options => $dtrace_options );

my $memstat_capture =
  PA::Capture::mdb::memstat->new( client         => $client,
                                  stat_name      => 'memstat',
                                );


say "AMQP SERVER: " . $client->amqp_server;
$loop->run();


