#!/usr/bin/env perl

use v5.20;
use strict;
use warnings;

use Data::Dumper;
use Future;
use IO::Async::Process;
use IO::Async::Timer::Periodic;
use File::Basename      qw( basename );
use JSON::MaybeXS;
use DateTime             qw();
use DateTime::TimeZone   qw();
use Solaris::kstat;
 
use IO::Async::Loop;
my $loop = IO::Async::Loop->new;

my $k = Solaris::kstat->new();

() = each %{$k->{zfs}->{0}->{arcstats}};
() = each %{$k->{unix}->{0}->{dnlcstats}};

my $timer = IO::Async::Timer::Periodic->new(
  interval => 1,
  on_tick  => sub {
    $k->update;
    my $latest_k = $k->copy;
    my $kstat_future =
      Future->wait_all(
        doarcstats($latest_k),
        dodnlcstats($latest_k),
      );
    $kstat_future->on_done(
      sub {
        my (@done_futures) = @_;
        foreach my $done_future (@done_futures) {
          say Dumper( $done_future->get );
        }
      }
    );
  },
);

$timer->start;
$loop->add( $timer );

our @futures;

our $dt_regex = qr{^
            (?: \d+     # Epoch secs
                \n
            )
           }smx;

our $regex = qr{(
                 $dt_regex   # date-timestamp
                 (?:.+?)     # all data after date-timestamp
               ) \z          # End of this interval
              }smx;

my $whole_interval_regex = {
  vmstat  => $regex,
  mpstat  => $regex,
  netstat => $regex,
};

my @stat_commands = (
    [ "/bin/vmstat", "-T", "u", "1" ],
    # [ "/usr/bin/mpstat", "-T", "u", "1" ],
    # [ "/usr/bin/mpstat", "-T", "u", "-A", "core", "1" ],
    # [ "/usr/bin/netstat", "-T", "u", "-s", "-P", "ip", "1" ],
    # [ "/usr/bin/netstat", "-T", "u", "-s", "-P", "tcp", "1" ],
);

our $read_repeater = \&read_repeater;

foreach my $cmd (@stat_commands) {
  my $stat_name = basename($cmd->[0]);
  say "Setting up process for: $stat_name";
  my $proc_obj = IO::Async::Process->new(
    command => $cmd,
    stdout => { 
      on_read => sub { 0 },
    },
    on_finish => sub {
      # $proc_obj = IO::Async::Process->new(
      #   command => $cmd,
      #   stdout => { 
      #     on_read => sub {
      #       my ($stream, $buffref, $eof) = @_;
      #       while( $$buffref =~ s/^(.+)//smx ) {
      #         say "Received:\n$1";
      #       }
      #       return 0;
      #     },
      #   },
      # );
    },
  );

  $loop->add( $proc_obj );

  my $trial_f = $proc_obj->stdout->read_until( $whole_interval_regex->{ $stat_name } );
  $trial_f->on_done( sub { $read_repeater->( $trial_f, $proc_obj, $stat_name ) } );
  push @futures, $trial_f;
}

$loop->run;

sub read_repeater {
  my ($future, $proc_obj, $stat_name) = @_;
  say "read_repeater for $stat_name";

  my ($string, $eof) = $future->get;
  say "Received:\n$string";
  $future = $proc_obj->stdout->read_until( $whole_interval_regex->{ $stat_name } );
  $future->on_done( sub { $read_repeater->( $future, $proc_obj, $stat_name ) } );
  return $future;
}

# sub finisher {
#   $vmstat = IO::Async::Process->new(
#     command => [ "/bin/vmstat", "-T", "u", "1" ],
#     stdout => { 
#       on_read => sub {
#         my ($stream, $buffref, $eof) = @_;
#         while( $$buffref =~ s/^(.+)//smx ) {
#           say "Received:\n$1";
#         }
#         return 0;
#       }
#     },
#     on_finish => \&finisher,
#   );
#   $loop->add( $vmstat );
# }


sub doarcstats {
  my ($k) = @_;

  return capture_kstat($k, "zfs", 0, "arcstats");
}

sub dodnlcstats {
  my ($k) = @_;

  return capture_kstat($k, "unix", 0, "dnlcstats");
}

sub capture_kstat {
  my ($k, $module, $instance, $name) = @_;

  my ($outdata);
  # Filter out the non-numeric values (class => misc, for instance)
  my %keep = map{ $_ => $k->{$module}{$instance}{$name}{$_}  }
             grep { $k->{$module}{$instance}{$name}{$_} !~ m/\D/; }
             keys %{$k->{$module}{$instance}{$name}};

  $outdata = \%keep;
  $outdata->{timestamp} = DateTime->now( time_zone => 'UTC' )->epoch;

  return Future->wrap( $outdata );
}
