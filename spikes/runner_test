#!/usr/bin/env perl

use v5.20;
use strict;
use warnings;

use Data::Dumper;
use IO::Async::Process;
use File::Basename      qw( basename );
 
use IO::Async::Loop;
my $loop = IO::Async::Loop->new;

our @futures;

our $dt_regex = qr{^
            (?: \d+     # Epoch secs
                \n
            )
           }smx;

our $regex = qr{(
                 $dt_regex   # date-timestamp
                 (?:.+?)     # all data after date-timestamp
               ) \z          # End of this interval
              }smx;

my $whole_interval_regex = {
  vmstat  => $regex,
  mpstat  => $regex,
  netstat => $regex,
};

my @stat_commands = (
    [ "/bin/vmstat", "-T", "u", "1" ],
    [ "/usr/bin/mpstat", "-T", "u", "1" ],
    [ "/usr/bin/mpstat", "-T", "u", "-A", "core", "1" ],
    [ "/usr/bin/netstat", "-T", "u", "-s", "-P", "ip", "1" ],
    [ "/usr/bin/netstat", "-T", "u", "-s", "-P", "tcp", "1" ],
);

our $read_repeater = \&read_repeater;

foreach my $cmd (@stat_commands) {
  my $stat_name = basename($cmd->[0]);
  say "Setting up process for: $stat_name";
  my $proc_obj = IO::Async::Process->new(
    command => $cmd,
    stdout => { 
      on_read => sub { 0 },
    },
    on_finish => sub {
      # $proc_obj = IO::Async::Process->new(
      #   command => $cmd,
      #   stdout => { 
      #     on_read => sub {
      #       my ($stream, $buffref, $eof) = @_;
      #       while( $$buffref =~ s/^(.+)//smx ) {
      #         say "Received:\n$1";
      #       }
      #       return 0;
      #     },
      #   },
      # );
    },
  );

  $loop->add( $proc_obj );

  my $trial_f = $proc_obj->stdout->read_until( $whole_interval_regex->{ $stat_name } );
  $trial_f->on_done( sub { $read_repeater->( $trial_f, $proc_obj, $stat_name ) } );
  push @futures, $trial_f;
}

$loop->run;

sub read_repeater {
  my ($future, $proc_obj, $stat_name) = @_;
  say "read_repeater for $stat_name";

  my ($string, $eof) = $future->get;
  say "Received:\n$string";
  $future = $proc_obj->stdout->read_until( $whole_interval_regex->{ $stat_name } );
  $future->on_done( sub { $read_repeater->( $future, $proc_obj, $stat_name ) } );
  return $future;
}

# sub finisher {
#   $vmstat = IO::Async::Process->new(
#     command => [ "/bin/vmstat", "-T", "u", "1" ],
#     stdout => { 
#       on_read => sub {
#         my ($stream, $buffref, $eof) = @_;
#         while( $$buffref =~ s/^(.+)//smx ) {
#           say "Received:\n$1";
#         }
#         return 0;
#       }
#     },
#     on_finish => \&finisher,
#   );
#   $loop->add( $vmstat );
# }


