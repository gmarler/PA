#!/usr/bin/env perl

use v5.18;
use strict;
use warnings;

use FindBin qw($Bin);

use lib "$Bin/../lib";

use PA::Schema;
use Data::Dumper;

use JSON::MaybeXS;
use DateTime             qw();
use Data::Dumper;
use Net::AMQP::RabbitMQ;
use IO::Async::Loop      qw();
use IO::Async::Function  qw();
use Getopt::Long;

my %recvd_seq;
#my %recvd_seq2;

my $connect_info = { dsn => 'DBI:Pg:dbname=template1;host=localhost;port=15432', user => 'postgres', password => '' };

my $schema = PA::Schema->connect(
  $connect_info
);

my $host_ids = {};
my $hosts_rs   = $schema->resultset( 'Host' );
my $vmstat_rs  = $schema->resultset( 'Vmstat' );
my $arcstat_rs = $schema->resultset( 'Arcstat' );


my $amqp_server = "localhost";

GetOptions( "amqp=s" => \$amqp_server )
  or die("ERROR in command line args");

my $coder = JSON::MaybeXS->new->ascii;

my $loop = IO::Async::Loop->new;
my $mq    = Net::AMQP::RabbitMQ->new();
my $exchange_name = "topic_stat";
my $routing_key = '#';

$mq->connect(
  $amqp_server,
  {
    user     => 'solperf',
    password => 'solperf',
  },
);

$mq->channel_open(1);

$mq->exchange_declare(1, $exchange_name,
  { exchange_type => 'topic', }
);

my $queue_name = $mq->queue_declare(1, '',
                                    { exclusive   => 1,
                                      auto_delete => 1,
                                    } );

say "QUEUE NAME: $queue_name";

$mq->queue_bind(1, $queue_name, $exchange_name, $routing_key );


my $tag = $mq->consume(1, $queue_name,
                       { no_ack => 0, } );

say "TAG: $tag";

$SIG{'INT'} = sub { exit(0); };

my $fsop_lat_handler = IO::Async::Function->new(
  code => \&fsop_lat_organize,
);

$loop->add( $fsop_lat_handler );

my @pending_futures;

#
# Wait forever
#
while (my $dhref = $mq->recv(0)) {
  my ($host_id, $host_record);
  #say $dhref->{body};
  #say Dumper( [ $dhref ] );
  my $stat_ref = decode_json($dhref->{body});
  #say Dumper( $stat_ref );
  if (exists($recvd_seq{$dhref->{routing_key}})) {
    my ($next_seq) = $recvd_seq{$dhref->{routing_key}} + 1;
    if ($stat_ref->{sequence} != $next_seq) {
      my ($gap) = $stat_ref->{sequence} - $recvd_seq{$dhref->{routing_key}} - 1;
      say "$dhref->{routing_key}: EXPECTED SEQ $next_seq, RECEIVED $stat_ref->{sequence}, GAP SIZE $gap";
      # Update sequence to the latest received
      $recvd_seq{$dhref->{routing_key}} = $stat_ref->{sequence};
    } else {
      # Update sequence to the latest received
      $recvd_seq{$dhref->{routing_key}} = $stat_ref->{sequence};
    }
  } else {
    $recvd_seq{$dhref->{routing_key}} = $stat_ref->{sequence};
  }

  my ($hostname,$stat_type) = $dhref->{routing_key} =~ m/^([^.]+)\.(.+)/;
  $host_record =
    $hosts_rs->find({ name => $hostname });

  # If the host_record could not be found, then this has to be an attempt to
  # register a host for the first time.  Otherwise, we have to skip this, as we
  # won't be able to insert the record in the first place.
  unless ($host_record) {
    if ($stat_type ne "register_host") {
      say "Cannot accept $stat_type for unregistered host $hostname";
      next;
    } else {
      if (register_host($schema, $hostname, $stat_ref)) {
        say "SUCCESSFULLY REGISTERED $hostname!";
      } else {
        die "FAILED to register host $hostname";
      }
    }
  }

  if ($stat_type eq "vmstat") {
    my $new_vmstat = $host_record->create_related('vmstat_rs',
      {
        freemem   => $stat_ref->{freemem},
        timestamp => DateTime->from_epoch( epoch => $stat_ref->{timestamp},
                                           time_zone => 'UTC' ),
        #host_fk   => $host_record->host_id,
      }
    );
  } elsif ($stat_type eq "arcstats") {
    insert_arcstat($host_record, $stat_ref);
  }


  if ($stat_type eq "fsop_lat") {
    my @fsop_data;
    #my @next_pending_futures;
    #say "PENDING FUTURES: " . scalar(@pending_futures);
    #foreach my $pf (@pending_futures) {
    #  if ($pf->is_done) {
    #    $pf->get;
    #  } else {
    #    push @next_pending_futures, $pf;
    #  }
    #}

    # @pending_futures = @next_pending_futures;

    my $fsop_data_aref =
      $fsop_lat_handler->call(
        args => [ $stat_ref, $host_record ],
      )->on_done(
        sub {
          my $ret_aref = shift;
          #say Dumper( $ret_aref );
          return $ret_aref;
        }
      )->on_fail(
        sub {
          say "CANNOT HANDLE Filesystem Latency DATA! - $_[0]";
        }
      )->get;
      #push @pending_futures, $f;

      push @fsop_data,
        [ qw( host_fk timestamp fsop fstype latrange count ) ];
      push @fsop_data, @$fsop_data_aref;
      #say Dumper( \@fsop_data );
      $schema->resultset('Fsoplat')->populate( \@fsop_data );
  }

  if ($stat_type eq "memstat") {
    my %memstat_data;
    my @memstat_types = qw( defdump_prealloc zfs_file_data free_cachelist kernel
                            anon exec_and_libs page_cache zfs_metadata
                            free_freelist total );
    foreach my $memstat_type (@memstat_types) {
      foreach my $submeta (keys %{$stat_ref->{$memstat_type}}) {
        $memstat_data{"${memstat_type}_${submeta}"} =
          $stat_ref->{$memstat_type}->{$submeta};
      }
    }
    say Dumper( \%memstat_data );
    my $new_memstat = $host_record->create_related('memstat_rs',
      {
        timestamp => DateTime->from_epoch( epoch => $stat_ref->{timestamp},
                                           time_zone => 'UTC' ),
        %memstat_data,
      }
    );
  }

  #say "ACKNOWLEGING: $dhref->{delivery_tag}";
  $mq->ack( 1, $dhref->{delivery_tag}, 1 );
  #if (not exists($recvd_seq2{$dhref->{routing_key}})) {
  #  $recvd_seq2{$dhref->{routing_key}} = [];
  #}
  #push @{$recvd_seq2{$dhref->{routing_key}}}, $stat_ref->{sequence};
}


sub fsop_lat_organize {
  my ($stat_ref, $host_record) = @_;
  my $stat_href = $stat_ref->{interval_data}->[0];
  my $timestamp = DateTime->from_epoch( epoch => $stat_ref->{timestamp},
                                        time_zone => 'UTC' ),
  my $host_id   = $host_record->id;
  my $ret_aref = [];

  foreach my $fsop_fstype (keys %$stat_href) {
    my ($fsop, $fstype) = $fsop_fstype =~ m{([^:]+):(.+)};
    my $latencies = $stat_href->{$fsop_fstype};
    foreach my $lat_range_count (@$latencies) {
      # "deflate" the latency range into something the DB will understand as a
      # string
      my $lat_range = "[ $lat_range_count->[0]->[0], $lat_range_count->[0]->[1] ]";
      my $count     = $lat_range_count->[1];
      push @$ret_aref, [ $host_id, $timestamp, $fsop, $fstype, $lat_range, $count ];
    }
  }

  return $ret_aref;
}


sub register_host {
  my ($schema, $hostname, $hostreg_ref) = @_;
  my $hosts_rs   = $schema->resultset( 'Host' );

  my ($time_zone) = $hostreg_ref->{time_zone};
  my ($host_record) =
    $hosts_rs->find_or_create({ name      => $hostname,
                                time_zone => $time_zone});

  if (defined($host_record)) {
    say "Created host record ID: " . $host_record->host_id;
    return 1;
  } else {
    say "FAILED to create host record for $hostname";
    return;
  }
}

sub insert_arcstat {
  my ($host_record, $stat_ref) = @_;
  my %columns;
  my @fields = qw( p buf_size c_min c c_max data_size deleted
  demand_data_hits demand_data_misses demand_metadata_hits
  demand_metadata_misses evict_mfu evict_mru hits l2_hits l2_misses
  l2_persistence_hits l2_read_bytes l2_rw_clash l2_size memory_throttle_count
  meta_limit meta_max meta_used mfu_ghost_hits mfu_hits misses mru_ghost_hits
  mru_hits mutex_miss other_size prefetch_behind_prefetch prefetch_data_hits
  prefetch_data_misses prefetch_joins prefetch_meta_size prefetch_metadata_hits
  prefetch_metadata_misses prefetch_reads prefetch_size size
  );
  # NOTE: For any kstat derived metric, always include the fields specific to
  #       kstats
  my @kstat_fields = qw( snaptime );
  push @fields, @kstat_fields;
  my $renamed_fields = {
    "evict_mru" => "evicted_mru",
    "evict_mfu" => "evicted_mfu"
  };
  foreach my $f (@fields) {
    my $renamed_f;
    if (exists $renamed_fields->{$f}) {
      $renamed_f = $renamed_fields->{$f};
    }
    # NOTE: This doesn't seem to work as expected
    # if (not defined($stat_ref->{$renamed_f //= $f})) {
    #   say "WARNING: $f not defined";
    # }
    $columns{$f} = $stat_ref->{$f};
  }
  foreach my $old_fname (keys %$renamed_fields) {
    my $new_fname = $renamed_fields->{$old_fname};
    if (exists $stat_ref->{$new_fname}) {
      $columns{$old_fname} = $stat_ref->{$new_fname};
    }
  }
  foreach my $f (keys %columns) {
    if (not defined($columns{$f})) {
      say "WARNING: $f not defined";
    }
  }

  my $new_arcstat = $host_record->create_related('arcstat_rs',
      {
        timestamp => DateTime->from_epoch( epoch => $stat_ref->{timestamp},
                                           time_zone => 'UTC' ),
        %columns,
      }
  );
}
