#!/usr/bin/env perl

use strict;
use warnings;
use v5.20;

package DateTime::Format::DTrace;

use DateTime::Format::Builder (
  # Accepted Formats:
  # 2014 Nov  5 11:41:47  (output from DTrace's %Y format for walltimestamp)
  # OR
  # Epoch seconds
  parsers => {
    parse_datetime => [
      {
        # Parse epoch secs
        params => [qw( epoch )],
        regex  => qr/^ (\d+) $/x,
        constructor => [ 'DateTime', 'from_epoch' ],
      },
      {
        # 2014 Nov  5 11:41:47  (output from DTrace's %Y format for walltimestamp)
        strptime => '%Y %B %d %H:%M:%S',
      },
      {
        regex => qr/^(\d{4}) \s+ (\w{3}) \s+ (\d+) \s+
                     (\d+):(\d+):(\d+)$/x,
        params => [qw( year month day hour minute second )],
      },
      {
        # HH:MM:SS with no date provided
        length => 8,
        regex  => qr/^(\d{2}):(\d{2}):(\d{2})$/x,
        params => [qw( hour minute second )],
        extra  => { time_zone => 'floating' },
        preprocess  => \&_add_in_fake_date,
      }
    ]
  }
);

# To be used when only hour:minute:second has been detected with no date
sub _add_in_fake_date {
  my %args = @_;
  my ($date, $p) = @args{qw( input parsed )};
  # Yeah, the month and day have to be between 1 and 12
  @{$p}{qw( year month day )} = (0, 1, 1);
  return $date;
}

package main;

use DateTime::Format::Strptime   qw();
use DateTime                     qw();
use DateTime::TimeZone           qw();
use List::MoreUtils;
use Data::Dumper;

my $datetime = "2017 Jan  9 15:48:00";
my $epoch = "1483976880";
my $TZ    = "US/Eastern";

# A formatter that will allow us to increment a DateTime and print it again
# NOTE: the pattern is set to reproduce the above output example exactly
my $formatter = DateTime::Format::Strptime->new(pattern => '%Y %b %e %H:%M:%S');
#
my $dt = DateTime::Format::DTrace->parse_datetime( $datetime );
$dt->set_formatter( $formatter );


#say $dt;
#
#$dt = DateTime::Format::DTrace->parse_datetime( $epoch );
#say $dt;


my $stack_k = q/
              SPARC-T5`hwblkclr+0x44
              unix`run_interrupt_thread
              unix`pagezero+0x68
              genunix`anon_map_getpages+0x778
              genunix`segvn_fault_anonpages+0x4f4
              genunix`segvn_fault+0x508
              genunix`as_fault+0x438
              unix`pagefault+0x54
              unix`trap+0xe74
              unix`utl0+0x4c
                1

              SPARC-T5`hwblkclr+0x90
              unix`run_interrupt_thread
              unix`pagezero+0x68
              genunix`anon_map_getpages+0x778
              genunix`segvn_fault_anonpages+0x4f4
              genunix`segvn_fault+0x508
              genunix`as_fault+0x438
              unix`pagefault+0x54
              unix`trap+0xe74
              unix`utl0+0x4c
                1

              genunix`anon_addhash+0xa0
              unix`run_interrupt_thread
              genunix`anon_alloc+0x144
              genunix`anon_map_getpages+0x3f8
              genunix`segvn_fault_anonpages+0x4f4
              genunix`segvn_fault+0x508
              genunix`as_fault+0x438
              unix`pagefault+0x54
              unix`trap+0xe74
              unix`utl0+0x4c
                2

              unix`run_interrupt_thread
                5
/;

my $stack_ku = q/
              zfs`dmu_zfetch_find_remove_trigger+0x24
              zfs`dmu_zfetch_find_remove_trigger+0x14
              zfs`dmu_zfetch+0x54
              zfs`dbuf_read+0x1b8
              zfs`dnode_hold_impl+0x164
              zfs`dmu_read+0x18
              zfs`zfs_log_write+0x1f4
              zfs`zfs_write+0x8a8
              genunix`fop_write+0x84
              genunix`write+0x298
              unix`syscall_trap+0x228

              libc.so.1`__write+0x8
              postgres`XLogFlush+0x1b0
              postgres`RecordTransactionCommit+0x4ac
              postgres`CommitTransaction+0xec
              postgres`CommitTransactionCommand+0x6c
              postgres`finish_xact_command+0x7c
              postgres`exec_simple_query+0x3b4
              postgres`PostgresMain+0xb1c
              postgres`BackendRun+0x264
              postgres`BackendStartup+0x178
              postgres`ServerLoop+0x240
              postgres`PostmasterMain+0x12bc
              postgres`main+0x3a4
              postgres`_start+0x12c
                1

              zfs`zio_execute
              unix`run_interrupt_thread
              zfs`zio_wait+0x20
              zfs`dmu_tx_count_write+0x234
              zfs`dmu_tx_hold_write+0x38
              zfs`zfs_write+0x60c
              genunix`fop_write+0x84
              genunix`write+0x298
              unix`syscall_trap+0x228

              libc.so.1`__write+0x8
              postgres`mdextend+0x70
              postgres`ReadBuffer_common+0x404
              postgres`ReadBufferExtended+0xac
              postgres`RelationGetBufferForTuple+0x578
              postgres`heap_insert+0x5c
              postgres`ExecInsert+0x16c
              postgres`ExecModifyTable+0x238
              postgres`ExecProcNode+0x98
              postgres`ExecutePlan+0xd8
              postgres`standard_ExecutorRun+0xb0
              postgres`ProcessQuery+0x78
              postgres`PortalRunMulti+0x12c
              postgres`FillPortalStore+0x78
              postgres`PortalRun+0x248
              postgres`exec_execute_message+0x298
              postgres`PostgresMain+0xc40
              postgres`BackendRun+0x264
              postgres`BackendStartup+0x178
              postgres`ServerLoop+0x240
                1
/;


my $stack_epoch_k = "$epoch\n\n$stack_k";
my $stack_epoch_multi_k = "$epoch\n\n$stack_k\n" .
                          ++$epoch . "\n\n$stack_k\n" .
                          ++$epoch . "\n\n$stack_k\n" ;

my $stack_datetime_k = "$datetime\n\n$stack_k";
my $stack_datetime_multi_k = $dt . "\n\n$stack_k\n" .
                             $dt->add(seconds => 1) . "\n\n$stack_k\n" .
                             $dt->add(seconds => 1) . "\n\n$stack_k\n" ;

my $stack_datetime_ku = "$datetime\n\n$stack_ku";
my $stack_datetime_multi_ku = $dt . "\n\n$stack_ku\n" .
                              $dt->add(seconds => 1) . "\n\n$stack_ku\n" .
                              $dt->add(seconds => 1) . "\n\n$stack_ku\n" ;

my $epoch_interval_regex =
  qr/ (?<epoch> ^\d+) \n
      (?<interval_stacks> .+?)
      (?= (?: ^ \d+ \n | \z ) )
    /smx;

my $datetime_interval_regex =
  qr{^
     (?<datetime>
         \d{4} \s+        # year
         (?:Jan|Feb|Mar|Apr|May|Jun|
            Jul|Aug|Sep|Oct|Nov|Dec
         ) \s+
         \d+ \s+          # day of month
         \d+:\d+:\d+ \s+  # HH:MM:DD  (24 hour clock)
         \n
     )
     (?<interval_stacks> .+?)
     (?=
       (?:
         \d{4} \s+        # year
         (?:Jan|Feb|Mar|Apr|May|Jun|
            Jul|Aug|Sep|Oct|Nov|Dec
         ) \s+
         \d+ \s+          # day of month
         \d+:\d+:\d+ \s+  # HH:MM:DD  (24 hour clock)
         \n
         |
         \z
       )
     )
    }smx;

my $stack_regex =
  qr{
     (?<stack> .+?)
     ^   \s+? (?<stack_count> \d+) \n
    }smx;

my $match_count;
while ($stack_k =~ m{$epoch_interval_regex}gsmx) {

  # Strip away anything in the beginning that is useless
  say "EPOCH " . $+{epoch};
  say "STACKS   " . $+{interval_stacks};

}


while ($stack_epoch_k =~ m{$epoch_interval_regex}gsmx) {

  $match_count++;
  # Strip away anything in the beginning that is useless
  say "EPOCH " . $+{epoch};
  say "STACKS   " . $+{interval_stacks};

}

say "Match count for single epoch interval $match_count";

$match_count = 0;

while ($stack_epoch_multi_k =~ m{$epoch_interval_regex}gsmx) {

  $match_count++;
  # Strip away anything in the beginning that is useless
  say "EPOCH " . $+{epoch};
  say "STACKS   " . $+{interval_stacks};

}

say "Match count for multi epoch intervals: $match_count";


$match_count = 0;

while ($stack_datetime_k =~ m{$datetime_interval_regex}gsmx) {

  $match_count++;
  say "DATETIME " . $+{datetime};
  #say "STACKS   " . $+{interval_stacks};

}

say "Match count for single datetime interval $match_count";

$match_count = 0;

while ($stack_datetime_multi_k =~ m{$datetime_interval_regex}gsmx) {

  $match_count++;
  say "DATETIME " . $+{datetime};
  #say "STACKS   " . $+{interval_stacks};
}

say "Match count for multi datetime intervals: $match_count";

$match_count = 0;

while ($stack_datetime_multi_ku =~ m{$datetime_interval_regex}gsmx) {

  $match_count++;
  say "DATETIME " . $+{datetime};
  #say "STACKS   " . $+{interval_stacks};

  my $interval_stacks = $+{interval_stacks};
  my $interval_href = { };
  while ($interval_stacks =~ m{$stack_regex}gsmx) {
    say "STACK:\n$+{stack}";
    say "STACK_COUNT: $+{stack_count}";
    my ($stack) = $+{stack};
    # Tear down stack
    # - split on newlines
    my (@stack) = split /\n/, $stack;
    # - delete blanks lines at beginning of the array
    my $index = List::MoreUtils::first_index {$_ ne ''} @stack;
    if (defined($index)) {
      splice(@stack,0,$index);
    }
    # - delete blanks lines at end of the array
    #   Apparently unnecessary due to regex above
    #   NOTE: below is BROKEN - fix if needed
    #$index = List::MoreUtils::first_index {$_ ne ''} reverse @stack;
    #if (defined($index)) {
    #  say "INDEX: $index";
    #  #splice(@stack,-1,$index);
    #}
    foreach my $frame (@stack) {
      # - Strip off leading whitespace
      $frame =~ s{^\s+}{};
      # - strip off +0x.+
      $frame =~ s{\+.+}{};
      # - Replace blank line in middle of stack with '-'
      #   That's the dividing mark between user/kernel stacks
      $frame =~ s{^$}{\-};
    }
    say Dumper(\@stack);
    say Dumper($interval_href);
  }
}

say "Match count for multi datetime kernel/user intervals: $match_count";



#
# Structure:
# - Read in enough data to determine if there are timestamps or not
# - Iterator to break up stacks into either:
#   - the entire file (no timestamps)
#   - timestamps (epoch or date/time)
#
#   - Iterator to break up individual stacks on counts
#
#     - Iterator to collapse individual stacks into hashrefs
#
