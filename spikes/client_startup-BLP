#!/usr/bin/env perl

package PA::AMQP::Client;

use v5.20;

use Moose;
use MooseX::Types::Moose qw(Str Int Undef);
use Moose::Util::TypeConstraints;
use namespace::autoclean;
use IO::Async::Loop             qw();
use DateTime::TimeZone          qw();
use Net::Async::AMQP            qw();
use JSON::MaybeXS               qw();

with 'MooseX::Log::Log4perl';

class_type 'Net::Async::AMQP', { class => 'Net::Async::AMQP' };
class_type 'Net::Async::AMQP::Channel';
class_type 'IO::Async::Loop';

#############################################################################
# Attributes
#############################################################################

has [ 'loop' ] => (
  is       => 'ro',
  isa      => 'IO::Async::Loop',
  default  => sub {
                return IO::Async::Loop->new;
              },
);

has [ 'mq' ] => (
  is       => 'ro',
  isa      => 'Net::Async::AMQP',
  lazy     => 1,
  builder  => '_build_mq',
);
 
has [ 'amqp_channel' ] => (
  is       => 'rw',
  isa      => Undef | 'Net::Async::AMQP::Channel',
  default  => undef,
);


has [ 'local_tz' ] => (
  is       => 'ro',
  isa      => 'DateTime::TimeZone',
  default  => sub {
                DateTime::TimeZone->new( name => 'local' );
              },
);

has [ 'amqp_server' ] => (
  is       => 'ro',
  isa      => 'Str',
  default  => sub {
                return "localhost";
              },
);

has [ 'mq_user' ] => (
  is       => 'ro',
  isa      => 'Str',
  default  => sub {
                return "solperf";
              },
);

has [ 'mq_password' ] => (
  is       => 'ro',
  isa      => 'Str',
  default  => sub {
                return "solperf";
              },
);

has [ 'exchange_name' ] => (
  is       => 'ro',
  isa      => 'Str',
  default  => sub {
                return "topic_stat";
              },
);

has [ 'client_hostname' ] => (
  is       => 'ro',
  isa      => 'Str',
  default  => sub {
                my $hostname = qx{/bin/uname -n};
                chomp($hostname);
                return $hostname;
              },
);

has [ 'json_encoder' ] => (
  is       => 'ro',
  isa      => 'Object',
  default  => sub {
                return JSON::MaybeXS->new->ascii;
              },
);


sub _build_mq {
  my ($self) = @_;

  my $loop = $self->loop;
  $loop->add(
    my $mq = Net::Async::AMQP->new()
  );
  $mq->connect(
    host    => $self->amqp_server,
    user    => $self->mq_user,
    pass    => $self->mq_password,
    vhost   => '/',
  )->then(
    sub {
      say "CONNECT SUCCEEDED";
      shift->open_channel;
    },
    sub { say "CONNECT FAILED!" }
  )->then(
    sub {
      my ($channel) = shift;
      say "OPENED CHANNEL " . $channel->id;
      # Store channel for later use
      $self->amqp_channel($channel);
      Future->needs_all(
        $channel->exchange_declare(
          type     => 'topic',
          exchange => $self->exchange_name,
        )
      );
    },
    sub { say "FAILED TO OPEN CHANNEL"; }
  )->get;

  return $mq;
}

# Use BUILD to specify the order in which attributes are initialized
sub BUILD {
  my ($self) = @_;

  say "Building loop";
  $self->loop;
  say "Building amqp_server";
  $self->amqp_server;
  say "Building mq_user";
  $self->mq_user;
  say "Building mq_password";
  $self->mq_password;
  say "Building exchange_name";
  $self->exchange_name;
  say "Building mq";
  $self->mq;
}


sub send {
  my ($self, $routing_key, $d_href) = @_;

  my ($ch) = $self->amqp_channel;
  my ($coder) = $self->json_encoder;
  my ($exchange_name) = $self->exchange_name;

  $ch->publish(exchange      => $exchange_name,
               routing_key   => $routing_key,
               type          => "text/plain",
               expiration    => 60000,
               delivery_mode => 1,           # delivery_mode => 2 is persistent
               payload       => $coder->encode( $d_href ),
             );
}

package main;
use v5.20;
use strict;
use warnings;

use Getopt::Long;
use JSON::MaybeXS;
use DateTime::TimeZone   qw();
use Net::Async::AMQP;
use IO::Async::Loop;
use Data::Dumper;
use PA::AMQP::Client;

# This spike shows how PA clients starting up will initially post host specific
# information, so that it can be received and pre-inserted into the back end
# database before the host begins to send information.

my %client_ctor_args;
my $amqp_server;

GetOptions( "amqp=s" => \$amqp_server )
  or die("ERROR in command line args");

if ($amqp_server) {
  $client_ctor_args{amqp_server} = $amqp_server;
}

my $client = PA::AMQP::Client->new( %client_ctor_args );

say "AMQP SERVER: " . $client->amqp_server;

exit;


my $true = Net::AMQP::Value->true;
my $msg  = 'info: Hello World!';
my $outdata = { junk => "yep, it's junk" };

 
# 
# $loop->run();


